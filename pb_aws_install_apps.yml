---
  - name: Get the jumphost ip address
    hosts: local
    gather_facts: no
    become: no
    vars_files:
      - vars_infrastructure.yml
      - vars_aws.yml
    tasks:
    - name: Collect all instances with tag Apps
      ec2_instance_facts:
        region: "{{ region }}"
        filters:
          "tag:Group": jump
          instance-state-name: running
      register: jumphost_instance
    - name: Jumphost found
      debug:
        msg: "Jumphost found: {{ jumphost_instance }}"
    - name: Add the jumphost
      add_host:
        name: "{{ jumphost_instance.instances.0.public_ip_address }}"
        group: "dyn_jumpbox"
        ansible_ssh_private_key_file: "{{ lookup('env','HOME') }}/.ssh/id_rsa_aws_proxy.pem"
        ansible_ssh_user: centos
  - hosts: dyn_jumpbox
    gather_facts: true
    become: no
    vars_files:
      - vars_infrastructure.yml
      - vars_aws.yml
    roles:
    - {role: app-basic-config, become: True}
    - {role: aws-facts, become: False}
    environment:
      AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
      AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"

   # Setup front-end load balancer tier

  - name: setup load-balancer tier
    hosts: frontends
    gather_facts: true
    become: yes
    roles:
      - {name: app-basic-config, tags: app-basic-config}
      - {name: app-loadbalancer, tags: [lbs, haproxy]}
    environment:
      AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
      AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"

  # Setup application servers tier

  - name: setup app tier
    hosts: apps
    become: yes
    gather_facts: true
    roles:
      - {name: app-basic-config, tags: app-basic-config}
      - {name: app-apps, tags: [apps, tomcat]}
    environment:
      AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
      AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"

  # Setup database tier

  - name: setup database tier
    become: yes
    hosts: appdbs
    gather_facts: true
    roles:
      - {name: app-basic-config, tags: app-basic-config}
      - {name: app-appdb, tags: [dbs, postgres]}
    environment:
      AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
      AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
